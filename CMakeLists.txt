cmake_minimum_required(VERSION 3.16)

project(111 VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
find_package(Qt6 COMPONENTS Multimedia REQUIRED)

set(PROJECT_SOURCES
        main.cpp
        widget.cpp
        widget.h
        widget.ui
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(111
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        before.h before.cpp
        play01.h play01.cpp
        over.h over.cpp


        plane.h plane.cpp
        plane.h plane.cpp
        plane.cpp
        config.h

        map.h map.cpp
        bullet.h bullet.cpp
        enemy.h enemy.cpp
        bomb.h bomb.cpp
        enemybullet.h enemybullet.cpp
        play03.h play03.cpp
        play02.h play02.cpp
        prop.h prop.cpp
        boss.h boss.cpp
        bossbullet.h bossbullet.cpp
        scoremanager.h scoremanager.cpp
        music.h music.cpp
        res.qrc
        boss2.h boss2.cpp
        bossbullet2.h bossbullet2.cpp



    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET 111 APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(111 SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(111
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(111 PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(111 PRIVATE Qt6::Multimedia)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.111)
endif()
set_target_properties(111 PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS 111
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(111)
endif()
